package com.BankApp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.BankApp.CustomExceptions.AccountException;
import com.BankApp.CustomExceptions.NegativeCashException;
import com.BankApp.CustomExceptions.OverdrawException;
import com.BankApp.CustomExceptions.PasswordMatchException;
import com.BankApp.CustomExceptions.UsernameException;
import com.BankApp.Doa.CustomerDoa;
import com.BankApp.Models.Customer;

public class CustomerDriver extends Driver{
	private final static Scanner sc = new Scanner(System.in);
	private static Customer currentCustomer = null;
	private static Logger logger = LogManager.getLogger(AdminDriver.class);

	public static void login() {
		CustomerDoa customerDoa = new CustomerDoa();
		boolean isValid = false;
		while(!isValid) {
			isValid = true;
			String username = getUsername();
			String password = getPassword();
			try {
				currentCustomer = customerDoa.selectCustomer(username, password);
				currentCustomer.setAccounts(customerDoa.getAccounts(currentCustomer.username));
			} catch(PasswordMatchException exception) {
				System.out.println("Password was incorrect, please input information again.");
				isValid = false;
			} catch(UsernameException exception) {
				System.out.println("Username does not exist, please input information again.");
				isValid = false;
			}
		}
		String input = "YES";
		while(input.equals("YES")) {			
			actions();
			System.out.print("Enter 'YES' to request another action: ");
			input = sc.nextLine();
		}
	}
	
	private static void actions() {
		System.out.println("Would you like to: ");
		System.out.println("1) Apply for joint account");
		System.out.println("2) Withdraw from an account");
		System.out.println("3) Deposit to an account");
		System.out.println("4) Transfer between two accounts");
		System.out.println("5) View user information");
		String input = sc.nextLine();
		switch(input) {
			case "1":
				applyForJointAccount();
				break;
			case "2":
				if(currentCustomer.getAccounts().size() > 0){
					withdraw();
				} else {
					System.out.println("Sorry, you do not have any accounts");
				}
				break;
			case "3":
				if(currentCustomer.getAccounts().size() > 0){
					deposit();
				} else {
					System.out.println("Sorry, you do not have any accounts");
				}
				break;
			case "4":
				if(currentCustomer.getAccounts().size() > 0){
					transfer();
				} else {
					System.out.println("Sorry, you do not have any accounts");
				}
				break;
			case "5":
				viewInfo();
				break;
			default:
				System.out.println("Invalid input");
		}
	}
	private static void applyForJointAccount() {
		CustomerDoa customerDoa = new CustomerDoa();
		boolean applied = customerDoa.applyForJointAccount(currentCustomer.username);
		if(applied) {			
			System.out.println("Your request for a joint account has been submitted!");
		} else {
			System.out.println("You have already submitted a request");
		}
	}
	private static void viewInfo() {
		System.out.println("Your info");
		System.out.println("\tUsername: " + currentCustomer.username);
		System.out.println("\tPassword: " + currentCustomer.getPassword());
		System.out.println("\tAccounts");
		
		if(currentCustomer.getAccounts().size() < 0) {
			System.out.println("\t\tYou do not have any accounts");
		} else {
			currentCustomer.getAccounts().forEach((account, balance) -> {
				System.out.println("\t\tAccount: " + account + " Balance: " + balance);
			});
		}
	}
	private static void transfer() {
		CustomerDoa customerDoa = new CustomerDoa();
		System.out.println("Which account would you like to transfer from?");
		currentCustomer.getAccounts().forEach((account, balance) -> {
			System.out.println("\tAccount: " + account + " Balance: " + balance);
		});
		int account1 = sc.nextInt();
		sc.nextLine();
		if(!currentCustomer.getAccounts().containsKey(account1)) {
			System.out.println("You can only transfer from your own account");
			return;
		}
		System.out.println("Which account would you like to transfer to?");
		System.out.println("1) To view all accounts");
		System.out.println("2) To enter account number");
		String input = sc.nextLine();
		if(input.equals("1")) {
			HashMap<String, ArrayList<Integer>> customers = customerDoa.getAllAccounts();
			System.out.println("Accounts: ");
			customers.forEach((name, accounts) -> {
				System.out.print("\t"+name+": ");
				if(accounts.size() > 0) {					
					accounts.forEach(account -> {
						System.out.print(account + " ");
					});
				} else {
					System.out.print(" no accounts");
				}
				System.out.println("");
			});
		}
		System.out.println("Enter account number: ");
		int account2 = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter the cash amount: ");
		Double cash = sc.nextDouble();
		sc.nextLine();
		try {			
			Double[] balance = customerDoa.transfer(account1, account2, cash);
			System.out.println(cash + " has been transferred from your account: " + account1 + " to account: " + account2);
			System.out.println("The new balance for your account: " + account1 + " is: " + balance[0]);
			currentCustomer.updateAccount(account1, balance[0]);
		} catch (AccountException e) {
			System.out.println("The account you are transferring to does not exist.");
		} catch (OverdrawException e) {
			System.out.println("Your account does not have enough funds to make the transfer");
		} catch (NegativeCashException e) {
			System.out.println("The withdrawal value cannot be negative");
		}
	}
	private static void deposit() {
		System.out.print("Which account would you like to deposit to?");
		currentCustomer.getAccounts().forEach((account, balance) -> {
			System.out.println("\tAccount: " + account + " Balance: " + balance);
		});
		System.out.println("Enter account number: ");
		int account = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter the cash amount: ");
		Double cash = sc.nextDouble();
		sc.nextLine();
		CustomerDoa customerDoa = new CustomerDoa();
		try {			
			Double balance = customerDoa.deposit(account, cash);
			System.out.println(cash + " has been withdrawn from account: " + account);
			System.out.println("The new balance is: " + balance);
			currentCustomer.updateAccount(account, balance);
			logger.info("Customer User: " + currentCustomer.username + " has deposited " + cash + " to their account: " + account);
		} catch (AccountException e) {
			System.out.println("The account does not exist.");
			logger.warn("Customer User: " + currentCustomer.username + " tried to deposit " + cash + "to a non existing account: " + account);
		} catch (NegativeCashException e) {
			System.out.println("The withdrawal value cannot be negative");
			logger.warn("Customer User: " + currentCustomer.username + " tried to deposit with a negative cash value");
		}
	}
	private static void withdraw() {
		System.out.print("Which account would you like to withdraw from?");
		currentCustomer.getAccounts().forEach((account, balance) -> {
			System.out.println("\tAccount: " + account + " Balance: " + balance);
		});
		System.out.println("Enter account number: ");
		int account = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter the cash amount: ");
		Double cash = sc.nextDouble();
		sc.nextLine();
		CustomerDoa customerDoa = new CustomerDoa();
		try {			
			Double balance = customerDoa.withdraw(account, cash);
			System.out.println(cash + " has been withdrawn from account: " + account);
			System.out.println("The new balance is: " + balance);
			currentCustomer.updateAccount(account, balance);
			logger.info("Customer User: " + currentCustomer.username + " has withdrawn " + cash + " from their account: " + account);
		} catch (AccountException e) {
			System.out.println("The account does not exist.");
			logger.warn("Customer User: " + currentCustomer.username + " tried to withdraw " + cash + "from a non existing account: " + account);
		} catch (OverdrawException e) {
			System.out.println("The account does not have enough funds to make the withdrawal");
		} catch (NegativeCashException e) {
			System.out.println("The withdrawal value cannot be negative");
			logger.warn("Customer User: " + currentCustomer.username + " tried to withdraw with a negative cash value");
		}
	}
	
	public static void create() {
		String username = getUsername();
		String password = createPassword();
		boolean isSubmitted = false;
		while(!isSubmitted) {
			Customer c = new Customer(username, password);
			CustomerDoa customerDoa = new CustomerDoa();
			isSubmitted = customerDoa.submitApplication(c);
			if(!isSubmitted) {
				System.out.println("That username has been taken.");
				System.out.print("Please enter a new username: ");
				username = sc.nextLine();
			}
		}
	}
}
